/*
 * This file is generated by jOOQ.
*/
package com.emu.apps.bookmarks.services.jooq.tables;


import com.emu.apps.bookmarks.services.jooq.Indexes;
import com.emu.apps.bookmarks.services.jooq.Keys;
import com.emu.apps.bookmarks.services.jooq.Public;
import com.emu.apps.bookmarks.services.jooq.tables.records.BookmarkRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bookmark extends TableImpl<BookmarkRecord> {

    private static final long serialVersionUID = 904529406;

    /**
     * The reference instance of <code>public.bookmark</code>
     */
    public static final Bookmark BOOKMARK = new Bookmark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookmarkRecord> getRecordType() {
        return BookmarkRecord.class;
    }

    /**
     * The column <code>public.bookmark.id</code>.
     */
    public final TableField<BookmarkRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bookmark.uuid</code>.
     */
    public final TableField<BookmarkRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.bookmark.url</code>.
     */
    public final TableField<BookmarkRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.bookmark.description</code>.
     */
    public final TableField<BookmarkRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.bookmark.favorite</code>.
     */
    public final TableField<BookmarkRecord, Boolean> FAVORITE = createField("favorite", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.bookmark.rate</code>.
     */
    public final TableField<BookmarkRecord, Integer> RATE = createField("rate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bookmark.version</code>.
     */
    public final TableField<BookmarkRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bookmark.date_archive</code>.
     */
    public final TableField<BookmarkRecord, Timestamp> DATE_ARCHIVE = createField("date_archive", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bookmark.date_creation</code>.
     */
    public final TableField<BookmarkRecord, Timestamp> DATE_CREATION = createField("date_creation", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bookmark.user_creation</code>.
     */
    public final TableField<BookmarkRecord, String> USER_CREATION = createField("user_creation", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.bookmark.date_modification</code>.
     */
    public final TableField<BookmarkRecord, Timestamp> DATE_MODIFICATION = createField("date_modification", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bookmark.user_modification</code>.
     */
    public final TableField<BookmarkRecord, String> USER_MODIFICATION = createField("user_modification", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>public.bookmark</code> table reference
     */
    public Bookmark() {
        this(DSL.name("bookmark"), null);
    }

    /**
     * Create an aliased <code>public.bookmark</code> table reference
     */
    public Bookmark(String alias) {
        this(DSL.name(alias), BOOKMARK);
    }

    /**
     * Create an aliased <code>public.bookmark</code> table reference
     */
    public Bookmark(Name alias) {
        this(alias, BOOKMARK);
    }

    private Bookmark(Name alias, Table<BookmarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bookmark(Name alias, Table<BookmarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOOKMARK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookmarkRecord> getPrimaryKey() {
        return Keys.BOOKMARK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookmarkRecord>> getKeys() {
        return Arrays.<UniqueKey<BookmarkRecord>>asList(Keys.BOOKMARK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bookmark as(String alias) {
        return new Bookmark(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bookmark as(Name alias) {
        return new Bookmark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(String name) {
        return new Bookmark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(Name name) {
        return new Bookmark(name, null);
    }
}
